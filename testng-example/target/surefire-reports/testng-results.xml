<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="1" total="6" passed="5">
  <reporter-output>
  </reporter-output>
  <suite name="Suite" duration-ms="69" started-at="2019-02-25T09:51:46Z" finished-at="2019-02-25T09:51:46Z">
    <groups>
    </groups>
    <test name="Test" duration-ms="69" started-at="2019-02-25T09:51:46Z" finished-at="2019-02-25T09:51:46Z">
      <class name="com.myProject.testcase.testOrder1">
        <test-method status="PASS" signature="beforeSuite()[pri:0, instance:com.myProject.testcase.testOrder1@35bbe5e8]" name="beforeSuite" is-config="true" duration-ms="7" started-at="2019-02-25T17:51:46Z" finished-at="2019-02-25T17:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeSuite -->
        <test-method status="PASS" signature="beforeTest()[pri:0, instance:com.myProject.testcase.testOrder1@35bbe5e8]" name="beforeTest" is-config="true" duration-ms="0" started-at="2019-02-25T17:51:46Z" finished-at="2019-02-25T17:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:com.myProject.testcase.testOrder1@35bbe5e8]" name="beforeClass" is-config="true" duration-ms="0" started-at="2019-02-25T17:51:46Z" finished-at="2019-02-25T17:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:com.myProject.testcase.testOrder1@35bbe5e8]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2019-02-25T17:51:46Z" finished-at="2019-02-25T17:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="printOrder1()[pri:0, instance:com.myProject.testcase.testOrder1@35bbe5e8]" name="printOrder1" duration-ms="0" started-at="2019-02-25T17:51:46Z" finished-at="2019-02-25T17:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- printOrder1 -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:com.myProject.testcase.testOrder1@35bbe5e8]" name="afterMethod" is-config="true" duration-ms="1" started-at="2019-02-25T17:51:46Z" finished-at="2019-02-25T17:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterTest()[pri:0, instance:com.myProject.testcase.testOrder1@35bbe5e8]" name="afterTest" is-config="true" duration-ms="1" started-at="2019-02-25T17:51:46Z" finished-at="2019-02-25T17:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method status="PASS" signature="afterClass()[pri:0, instance:com.myProject.testcase.testOrder1@35bbe5e8]" name="afterClass" is-config="true" duration-ms="0" started-at="2019-02-25T17:51:46Z" finished-at="2019-02-25T17:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method status="PASS" signature="afterSuite()[pri:0, instance:com.myProject.testcase.testOrder1@35bbe5e8]" name="afterSuite" is-config="true" duration-ms="1" started-at="2019-02-25T17:51:48Z" finished-at="2019-02-25T17:51:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterSuite -->
      </class> <!-- com.myProject.testcase.testOrder1 -->
      <class name="com.myProject.testcase.testOrder2">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:com.myProject.testcase.testOrder2@1cd072a9]" name="beforeClass" is-config="true" duration-ms="1" started-at="2019-02-25T17:51:46Z" finished-at="2019-02-25T17:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMthod()[pri:0, instance:com.myProject.testcase.testOrder2@1cd072a9]" name="beforeMthod" is-config="true" duration-ms="0" started-at="2019-02-25T17:51:46Z" finished-at="2019-02-25T17:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMthod -->
        <test-method status="PASS" signature="printOrder2()[pri:0, instance:com.myProject.testcase.testOrder2@1cd072a9]" name="printOrder2" duration-ms="2" started-at="2019-02-25T17:51:46Z" finished-at="2019-02-25T17:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- printOrder2 -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:com.myProject.testcase.testOrder2@1cd072a9]" name="afterMethod" is-config="true" duration-ms="1" started-at="2019-02-25T17:51:46Z" finished-at="2019-02-25T17:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMthod()[pri:0, instance:com.myProject.testcase.testOrder2@1cd072a9]" name="beforeMthod" is-config="true" duration-ms="4" started-at="2019-02-25T17:51:46Z" finished-at="2019-02-25T17:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMthod -->
        <test-method status="PASS" signature="testDataprovider_2(java.lang.String)[pri:0, instance:com.myProject.testcase.testOrder2@1cd072a9]" name="testDataprovider_2" duration-ms="3" started-at="2019-02-25T17:51:46Z" data-provider="datamethodwithname" finished-at="2019-02-25T17:51:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[data with name 1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataprovider_2 -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:com.myProject.testcase.testOrder2@1cd072a9]" name="afterMethod" is-config="true" duration-ms="0" started-at="2019-02-25T17:51:46Z" finished-at="2019-02-25T17:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMthod()[pri:0, instance:com.myProject.testcase.testOrder2@1cd072a9]" name="beforeMthod" is-config="true" duration-ms="1" started-at="2019-02-25T17:51:46Z" finished-at="2019-02-25T17:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMthod -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:com.myProject.testcase.testOrder2@1cd072a9]" name="afterMethod" is-config="true" duration-ms="0" started-at="2019-02-25T17:51:46Z" finished-at="2019-02-25T17:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="testDataprovider_2(java.lang.String)[pri:0, instance:com.myProject.testcase.testOrder2@1cd072a9]" name="testDataprovider_2" duration-ms="0" started-at="2019-02-25T17:51:46Z" data-provider="datamethodwithname" finished-at="2019-02-25T17:51:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[data with name 2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataprovider_2 -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:com.myProject.testcase.testOrder2@1cd072a9]" name="afterMethod" is-config="true" duration-ms="1" started-at="2019-02-25T17:51:46Z" finished-at="2019-02-25T17:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMthod()[pri:0, instance:com.myProject.testcase.testOrder2@1cd072a9]" name="beforeMthod" is-config="true" duration-ms="0" started-at="2019-02-25T17:51:46Z" finished-at="2019-02-25T17:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMthod -->
        <test-method status="PASS" signature="testDataprovider_2(java.lang.String)[pri:0, instance:com.myProject.testcase.testOrder2@1cd072a9]" name="testDataprovider_2" duration-ms="0" started-at="2019-02-25T17:51:46Z" data-provider="datamethodwithname" finished-at="2019-02-25T17:51:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[data with name 3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataprovider_2 -->
        <test-method status="PASS" signature="beforeMthod()[pri:0, instance:com.myProject.testcase.testOrder2@1cd072a9]" name="beforeMthod" is-config="true" duration-ms="1" started-at="2019-02-25T17:51:46Z" finished-at="2019-02-25T17:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMthod -->
        <test-method status="FAIL" signature="z()[pri:0, instance:com.myProject.testcase.testOrder2@1cd072a9]" name="z" duration-ms="3" started-at="2019-02-25T17:51:46Z" finished-at="2019-02-25T17:51:46Z">
          <exception class="java.lang.ArithmeticException">
            <message>
              <![CDATA[/ by zero]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.ArithmeticException: / by zero
	at com.myProject.testcase.testOrder2.z(testOrder2.java:50)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305)
	at org.testng.SuiteRunner.run(SuiteRunner.java:254)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:74)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:93)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.booter.ProviderFactory$ClassLoaderProxy.invoke(ProviderFactory.java:103)
	at com.sun.proxy.$Proxy0.invoke(Unknown Source)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:145)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcess(SurefireStarter.java:87)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:69)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.ArithmeticException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- z -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:com.myProject.testcase.testOrder2@1cd072a9]" name="afterMethod" is-config="true" duration-ms="0" started-at="2019-02-25T17:51:46Z" finished-at="2019-02-25T17:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterClass()[pri:0, instance:com.myProject.testcase.testOrder2@1cd072a9]" name="afterClass" is-config="true" duration-ms="0" started-at="2019-02-25T17:51:46Z" finished-at="2019-02-25T17:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
      </class> <!-- com.myProject.testcase.testOrder2 -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
